import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
	id 'jacoco'
}

group = 'com.noom.interview.fullstack'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.exposed:exposed-core:0.61.0'
	implementation 'org.jetbrains.exposed:exposed-dao:0.61.0'
	implementation 'org.jetbrains.exposed:exposed-jdbc:0.61.0'
	implementation 'org.jetbrains.exposed:exposed-java-time:0.61.0'
	implementation 'org.flywaydb:flyway-core:9.22.3'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2:2.2.224'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
}

jacoco {
	toolVersion = "0.8.10"
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events("passed", "failed", "skipped", "standard_out", "standard_error")
		exceptionFormat "full"
		showCauses true
		showExceptions true
		showStackTraces true
	}
	finalizedBy(tasks.named('jacocoTestReport'))
}

tasks.named('jacocoTestReport', JacocoReport) {
	dependsOn(tasks.named('test'))

	reports {
		xml.required.set(true)
		html.required.set(true)
	}

	def excludedFiles = [
			"**/org/h2/**",
			"**/java/sql/**",
			"**/javax/sql/**",
			"**/org/postgresql/**"
	]

	classDirectories.setFrom(
			fileTree("${buildDir}/classes/kotlin/main") {
				exclude excludedFiles
			}
	)
}

tasks.named('jacocoTestCoverageVerification') {
	dependsOn(tasks.named('test'))

	violationRules {
		rule {
			limit {
				minimum = 0.80 // âœ… 80% coverage required
			}
		}
	}
}

tasks.named('jacocoTestReport') {
	finalizedBy(tasks.named('jacocoTestCoverageVerification'))
}